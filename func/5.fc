{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
msg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If message body does not corresponds to `MsgBody` type described above, request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted). Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}

global int ctx_public_key_1;    ;; uint256
global int ctx_public_key_2;    ;; uint256
global int ctx_cnt_attempts;    ;; uint8
global int ctx_last_attempt;    ;; uint32
global cell ctx_requests;       ;; dict of requests

;; error_code
;; 63 - attempt count more than 10 requests per minute
;; 62 - owner not found
;; 61 - valid until < now()
;; 60 - valid until > now() + 60
;; 59 - incorrect signature
;; 58 - all owner's approved the request
;; 57 - send first or same request from one owner



{-
() load_data() impure {
  var ds = get_data().begin_parse();
  ctx_public_key_1 = ds~load_uint(256);
  ctx_public_key_2 = ds~load_uint(256);

  ctx_cnt_attempts = ds~load_uint(8);
  ctx_last_attempt = ds~load_uint(32);

  ctx_requests = ds~load_dict();
  ds.end_parse();
}

() save_data() impure {
  set_data(begin_cell()
    .store_uint(ctx_public_key_1, 256)    ;; public key 1
    .store_uint(ctx_public_key_2, 256)    ;; public key 2
    .store_uint(ctx_cnt_attempts, 8)      ;; count of recv_external
    .store_uint(ctx_last_attempt, 32)     ;; last recv_external
    .store_dict(ctx_requests)             ;; dict of requests
  .end_cell());
  commit();
}

() check_attempt() impure {
  if (ctx_last_attempt + 60 < now()) {
    ctx_cnt_attempts = 0;
  }
  ctx_cnt_attempts += 1;
  ;;throw_if(63, ctx_cnt_attempts > 10);
  if (ctx_cnt_attempts > 10) {
    ;;save_data();  ;; no need save data, next attempt with same error
    throw(63);
  }
  ctx_last_attempt = now();
}
-}



;; testable
cell pack_data(int public_key1, int public_key2) method_id {
  ctx_public_key_1 = public_key1;
  ctx_public_key_2 = public_key2;
  ctx_cnt_attempts = 0;
  ctx_last_attempt = now();
  ctx_requests = new_dict();

  ;; save_data() and return it
  cell data = begin_cell()
    .store_uint(ctx_public_key_1, 256)    ;; public key 1
    .store_uint(ctx_public_key_2, 256)    ;; public key 2
    .store_uint(ctx_cnt_attempts, 8)      ;; count of recv_external
    .store_uint(ctx_last_attempt, 32)     ;; last recv_external
    .store_dict(ctx_requests)             ;; dict of requests
  .end_cell();
  
  set_data(data);
  return data;
}

;; testable
() recv_external (slice in_msg_body) impure {
  ;;load_data();
  var ds = get_data().begin_parse();
  ctx_public_key_1 = ds~load_uint(256);
  ctx_public_key_2 = ds~load_uint(256);

  ctx_cnt_attempts = ds~load_uint(8);
  ctx_last_attempt = ds~load_uint(32);

  ctx_requests = ds~load_dict();
  ds.end_parse();

  ;;check_attempt();
  if (ctx_last_attempt + 60 < now()) {
    ctx_cnt_attempts = 0;
  }
  ctx_cnt_attempts += 1;
  if (ctx_cnt_attempts > 10) {
    ;; don't need save data, next attempt with same error >>>>> save gas
    throw(63);
  }
  ctx_last_attempt = now();

  int err_no = 0;

  int mask = 0;
  var public_key = in_msg_body~load_uint(256);
  if (public_key == ctx_public_key_1) {
    mask = 0x1;
  } else {
    if (public_key == ctx_public_key_2) {
      mask = 0x2;
    } else {
      err_no = 62;
    }
  }

  ifnot (err_no) {
    var signature = in_msg_body~load_bits(512);
    var request = (in_msg_body~load_ref()).begin_parse();
    slice req_to_save = request;

    var valid_until = request~load_uint(32);
    ;; for testing:
    ;;valid_until = now() + 20;
    if (valid_until <= now()) {
      err_no = 61;
    }
    if (valid_until - now() > 60) {
      err_no = 60;
    }

    ifnot (err_no) {
      var request_hash = slice_hash(req_to_save);
      ifnot (check_signature(request_hash, signature, public_key)) {
        err_no = 59;
      }

      ifnot (err_no) {
        int approved = 0;
        (slice req, int f) = ctx_requests.udict_get?(256, request_hash);
        if (f) {
          approved = req~load_uint(2);
          if (approved == 3) {
            err_no = 58;
          }

          approved |= mask;
        } else {
          approved = mask;
        }

        ifnot (err_no) {
          if (((approved ^ 3) & 3) == 0) {
            accept_message();
            ;;while (request.slice_refs()) {
              var mode = request~load_uint(8);
              send_raw_message(request~load_ref(), mode);
            ;;}
          } else {
            err_no = 57;
          }
        }

        ctx_requests = udict_set(ctx_requests, 256, request_hash, begin_cell()
          .store_uint(approved, 2)
          .store_slice(req_to_save)
          .end_cell().begin_parse());
      }
    }
  }

  ;;save_data();
  cell data = begin_cell()
    .store_uint(ctx_public_key_1, 256)    ;; public key 1
    .store_uint(ctx_public_key_2, 256)    ;; public key 2
    .store_uint(ctx_cnt_attempts, 8)      ;; count of recv_external
    .store_uint(ctx_last_attempt, 32)     ;; last recv_external
    .store_dict(ctx_requests)             ;; dict of requests
  .end_cell();
  set_data(data);
  commit();

  if (err_no) {
    throw(err_no);
  }
}

() recv_internal(slice in_msg_body) {
  ;; do nothing for internal messages
}
