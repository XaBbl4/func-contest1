;; Each test function must specify method_id
;; Test functions method_id need to started from 0

;; Each test functions must to be in pairs
;; First funtion expect nothing in arguments
;; But need to return:
;;        function selector - which function to test, e.g. 0 for recv_internal, -1 recv_external, 85143 for seqno, and so on
;;        tuple - stack values needed to be passed to function in tuple
;;        c4 cell - start data of smart contract
;;        c7 tuple / null
;;        gas limit integer / null

[int, tuple, cell, tuple, int] t5_init_data() method_id(0) {
    int function_selector = 90427; ;; funtion to run (90427 is pack_data)
    
    ;; Example contract message body
    int public_key1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;
    int public_key2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    tuple stack = unsafe_tuple([public_key1, public_key2]); ;; function stack

    cell data = begin_cell().end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

;; After test data function
;; We need to define test funtion
;; It will accept:
;;        exit code - exit code of runvm, here you can check errors / not
;;        c4 cell - data of smart contract after runvm invokes
;;        tuple - stack values of smart contract
;;        c5 cell - here you can check all outcoming messages
;;        gas - gas that was used
;; By default test is passed
;; You can use throw_if to fail test
_ t5_init(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0);
    
    ;;dump_stack();
    slice cs = first(stack).begin_parse();
    var spk1 = cs~load_uint(256);
    var spk2 = cs~load_uint(256);

    slice ds = data.begin_parse();
    var dpk1 = ds~load_uint(256);
    var dpk2 = ds~load_uint(256);

    throw_if(101, (spk1 != dpk1) | (spk1 != 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338));
    throw_if(102, (spk2 != dpk2) | (spk2 != 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078));
}



[int, tuple, cell, tuple, int] t5_owner1_sending_data() method_id(2) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(123, 32)
        .end_cell();
    ;;dump_stack();

    int valid_until = 0{-valid_until-};
    cell request = begin_cell()     ;; request:^Request
        .store_uint(valid_until, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    valid_until~dump();
    request~dump();     ;; for test generating signature

    slice signature = begin_cell()
        .store_uint(0{-test1-key1-signature1-}, 256)
        .store_uint(0{-test1-key1-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner1_sending(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() != 0); ;; actions is empty
{-
    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    slice sign_s = begin_cell()
        ;;.store_uint(0x4631fca9912fcc6d1b7fc94a2114fdf23beec4cc31acfd3bc581363d76318845, 256)
        ;;.store_uint(0x918765111249aa0024829b9d5eaf2870ded22f96ea8f84b1122d8816cfde290e, 256)
        .store_uint(0x58d20477510782b7f15a166a257a2ce9f7eb6879d301026283d4a0955dca86b8, 256)
        .store_uint(0xba3414edc7d3b861beeb387bb3e62301abed665f9b4ed854339f57cdc50c910f, 256)
        .end_cell().begin_parse();
    ;;var signature = sign_s~load_bits(512);
    ;;dump_stack();

    cell test_c = begin_cell()
        .store_uint(0x54657374, 32)
        .end_cell();
    slice test_s = test_c.begin_parse();

    ;;dump_stack();
    ;;throw_unless(150, check_data_signature(test_s, sign_s, pub_key_1));
    throw_unless(150, check_signature(cell_hash(test_c), sign_s, pub_key_1));
    int hash_c = cell_hash(test_c);
    int hash_s = slice_hash(test_s);
    slice t = begin_cell().store_uint(hash_c, 256).end_cell().begin_parse();
    ;;457a876813ab40760124d323ef84b7ae41c76ff976cd13f1b8e5f0ab0cbd4df7
    ;;dump_stack();
    throw_unless(151, t.slice_bits() > 0);
-}
}



[int, tuple, cell, tuple, int] t5_owner1_resending_data() method_id(4) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(123, 32)
        .end_cell();
    ;;dump_stack();

    cell request = begin_cell()     ;; request:^Request
        .store_uint(0{-valid_until-}, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    ;;dump_stack();

    slice signature = begin_cell()
        .store_uint(0{-test1-key1-signature1-}, 256)
        .store_uint(0{-test1-key1-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner1_resending(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100 + exit_code, exit_code != 57);
    throw_if(101, actions.cell_depth() != 0); ;; actions is empty

    {-
    var d = data.begin_parse();
    var pk1 = d~load_uint(256);
    var pk2 = d~load_uint(256);
    var cnt = d~load_uint(8);
    var last = d~load_uint(32);
    var dict = d~load_dict().begin_parse();
    var tt = dict~load_ref();
    var ttt = tt.begin_parse();
    dump_stack();
    var t = ttt~load_uint(1);
    throw_if(100, pk1 == 0);
    throw_if(100, pk2 == 0);
    throw_if(100, cnt == 0);
    throw_if(100, last == 0);
    throw_if(100, t == 0);
    -}
}



[int, tuple, cell, tuple, int] t5_owner2_sending_data() method_id(6) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(123, 32)
        .end_cell();
    ;;dump_stack();

    cell request = begin_cell()     ;; request:^Request
        .store_uint(0{-valid_until-}, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    ;;dump_stack();

    slice signature = begin_cell()
        .store_uint(0{-test1-key2-signature1-}, 256)
        .store_uint(0{-test1-key2-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_2, 256) ;; public_key
        .store_slice(signature)     ;; signature
        ;;.store_uint(6, 256)         ;; signature part 1
        ;;.store_uint(7, 256)         ;; signature part 2
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner2_sending(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() == 0); ;; actions is not empty
}



[int, tuple, cell, tuple, int] t5_owner2_resending_data() method_id(8) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(123, 32)
        .end_cell();
    ;;dump_stack();

    cell request = begin_cell()     ;; request:^Request
        .store_uint(0{-valid_until-}, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    ;;dump_stack();

    slice signature = begin_cell()
        .store_uint(0{-test1-key2-signature1-}, 256)
        .store_uint(0{-test1-key2-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_2, 256) ;; public_key
        .store_slice(signature)     ;; signature
        ;;.store_uint(6, 256)         ;; signature part 1
        ;;.store_uint(7, 256)         ;; signature part 2
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner2_resending(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(9) {
    throw_if(100 + exit_code, exit_code != 58);
    throw_if(101, actions.cell_depth() != 0); ;; actions is empty
}



[int, tuple, cell, tuple, int] t5_owner2_send1_data() method_id(10) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(666, 32)
        .end_cell();
    ;;dump_stack();

    int valid_until = 0{-valid_until-};
    cell request = begin_cell()     ;; request:^Request
        .store_uint(valid_until, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    valid_until~dump();
    request~dump();

    slice signature = begin_cell()
        .store_uint(0{-test2-key2-signature1-}, 256)
        .store_uint(0{-test2-key2-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_2, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner2_send1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(11) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() != 0);
}



[int, tuple, cell, tuple, int] t5_owner2_send2_data() method_id(12) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(999, 32)
        .end_cell();
    ;;dump_stack();

    int valid_until = 0{-valid_until-};
    cell request = begin_cell()     ;; request:^Request
        .store_uint(valid_until, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    valid_until~dump();
    request~dump();

    slice signature = begin_cell()
        .store_uint(0{-test3-key2-signature1-}, 256)
        .store_uint(0{-test3-key2-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_2, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner2_send2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(13) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() != 0);
}



[int, tuple, cell, tuple, int] t5_owner1_send1_data() method_id(14) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(666, 32)
        .end_cell();
    ;;dump_stack();

    int valid_until = 0{-valid_until-};
    cell request = begin_cell()     ;; request:^Request
        .store_uint(valid_until, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    ;;valid_until~dump();
    ;;request~dump();

    slice signature = begin_cell()
        .store_uint(0{-test2-key1-signature1-}, 256)
        .store_uint(0{-test2-key1-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner1_send1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(15) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() == 0);
}



[int, tuple, cell, tuple, int] t5_owner1_send2_data() method_id(16) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int priv_key_1 = 0x239f2092ade534c52386513a896d301881c1bd12614fc232d00bf281e37932db;
    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    int priv_key_2 = 0xd064408cb9fb2b3db6f91aa69c193ebe7ec8ff57fc0519b966aa27abc10cfb48;
    int pub_key_2 = 0x17dc8c126188f45b6d4bc3662c35ac2b800fd5eac772be813253baee0d9a9078;

    cell msg_to_send = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(my_address())
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(999, 32)
        .end_cell();
    ;;dump_stack();

    int valid_until = 0{-valid_until-};
    cell request = begin_cell()     ;; request:^Request
        .store_uint(valid_until, 32) ;;   valid_until (now())
        .store_uint(64, 8)          ;;   mode
        .store_ref(msg_to_send)     ;;   msg_to_send:^Cell (for send_raw_message)
        .end_cell();
    ;;valid_until~dump();
    ;;request~dump();

    slice signature = begin_cell()
        .store_uint(0{-test3-key1-signature1-}, 256)
        .store_uint(0{-test3-key1-signature2-}, 256)
        .end_cell().begin_parse();
    ;;dump_stack();

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_slice(signature)     ;; signature
        .store_ref(request)         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_owner1_send2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(17) {
    throw_if(100 + exit_code, exit_code != 0);
    throw_if(101, actions.cell_depth() == 0);
}



[int, tuple, cell, tuple, int] t5_valid_after_data() method_id(18) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_uint(0, 256)         ;; signature part 1
        .store_uint(0, 256)         ;; signature part 2
        .store_ref(begin_cell()     ;; request
            .store_uint(now() + 61, 32)   ;; valid_until (now())
            .end_cell())
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_valid_after(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(19) {
    throw_if(100 + exit_code, exit_code != 60);
}



[int, tuple, cell, tuple, int] t5_valid_before_data() method_id(20) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    int pub_key_1 = 0x27954a84e5329d47303740575ad34a7b5eca93a686768fc4e3661939db179338;

    slice msg_body = begin_cell()
        .store_uint(pub_key_1, 256) ;; public_key
        .store_uint(0, 256)         ;; signature part 1
        .store_uint(0, 256)         ;; signature part 2
        .store_ref(begin_cell()     ;; request
            .store_uint(now() - 1, 32)   ;; valid_until (now())
            .end_cell())
    .end_cell().begin_parse();
    ;;dump_stack();

    return [function_selector, unsafe_tuple([msg_body]), get_prev_c4(), get_c7(), null()];
}

_ t5_valid_before(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(21) {
    throw_if(100 + exit_code, exit_code != 61);
}



[int, tuple, cell, tuple, int] t5_owner_not_found_data() method_id(22) {
    ;; Funtion to run (recv_external)
    int function_selector = -1;

    slice msg_body = begin_cell()
        .store_uint(0, 256)         ;; public_key
        .store_uint(0, 256)         ;; signature part 1
        .store_uint(0, 256)         ;; signature part 2
        .store_ref(begin_cell().end_cell())         ;; request
    .end_cell().begin_parse();
    ;;dump_stack();

    cell data = cell data = begin_cell()
        .store_uint(1, 256)    ;; public key 1
        .store_uint(2, 256)    ;; public key 2
        .store_dict(new_dict())             ;; dict of requests
      .end_cell();

    return [function_selector, unsafe_tuple([msg_body]), data, get_c7(), null()];
}

_ t5_owner_not_found(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(23) {
    throw_if(100 + exit_code, exit_code != 62);
}



{-
INFO: Test [t5_init] status: [SUCCESS] Gas used: [1199]
INFO: Test [t5_owner1_sending] status: [SUCCESS] Gas used: [5261]
INFO: Test [t5_owner1_resending] status: [SUCCESS] Gas used: [5635]
INFO: Test [t5_owner2_sending] status: [SUCCESS] Gas used: [6551]
INFO: Test [t5_owner2_resending] status: [SUCCESS] Gas used: [5635]
INFO: Test [t5_owner2_send1] status: [SUCCESS] Gas used: [6489]
INFO: Test [t5_owner2_send2] status: [SUCCESS] Gas used: [7114]
INFO: Test [t5_owner1_send1] status: [SUCCESS] Gas used: [7073]
INFO: Test [t5_owner1_send2] status: [SUCCESS] Gas used: [7698]
INFO: Test [t5_valid_after] status: [SUCCESS] Gas used: [2836]
INFO: Test [t5_valid_before] status: [SUCCESS] Gas used: [2836]
INFO: Test [t5_owner_not_found] status: [SUCCESS] Gas used: [2369]
-}