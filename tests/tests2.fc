;; Each test function must specify method_id
;; Test functions method_id need to started from 0

;; Each test functions must to be in pairs
;; First funtion expect nothing in arguments
;; But need to return:
;;        function selector - which function to test, e.g. 0 for recv_internal, -1 recv_external, 85143 for seqno, and so on
;;        tuple - stack values needed to be passed to function in tuple
;;        c4 cell - start data of smart contract
;;        c7 tuple / null
;;        gas limit integer / null

int equal_slices (slice a, slice b) asm "SDEQ";

[int, tuple, cell, tuple, int] t2_recv_internal_data() method_id(0) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(123456, 32)
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    ;; initial data of contract
    cell data = begin_cell()
        ;;.store_slice(my_address())
        .store_uint(0, 2)
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}



;; After test data function
;; We need to define test funtion
;; It will accept:
;;        exit code - exit code of runvm, here you can check errors / not
;;        c4 cell - data of smart contract after runvm invokes
;;        tuple - stack values of smart contract
;;        c5 cell - here you can check all outcoming messages
;;        gas - gas that was used
;; By default test is passed
;; You can use throw_if to fail test

_ t2_recv_internal(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    ;;var act = actions.begin_parse();
    ;;var ref1s = ref1.begin_parse();
    ;;var flags = act~load_uint(4);
    ;;var addr = act~load_msg_addr();
    ;;var body = act~load_ref();
    ;;var sl = body.begin_parse();
    ;;var t = sl~load_uint(32);
    ;;var is_empty = actions.null?();

    throw_if(101, actions.cell_depth() == 0);
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}



[int, tuple, cell, tuple, int] t2_overflow_data() method_id(2) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    cell msg_full = begin_cell()
        .store_uint(4, 4)
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_int(1, 256)
        .store_int(2, 256)
        .store_int(3, 256)
        .store_int(4, 255)
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    ;; initial data of contract
    cell data = begin_cell()
        ;;.store_slice(my_address())
        .store_uint(0, 2)
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}



_ t2_overflow(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    throw_if(101, actions.cell_depth() == 0);
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}



[int, tuple, cell, tuple, int] t2_empty_data() method_id(4) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    cell msg_full = begin_cell()
        .store_uint(4, 4)
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_int(1, 32)
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    ;; initial data of contract
    cell data = begin_cell()
        .store_slice(my_address())
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}



_ t2_empty(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    throw_if(101, actions.cell_depth() != 0);
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}



{-
INFO: Test [t2_recv_internal] status: [SUCCESS] Gas used: [2662]
INFO: Test [t2_overflow] status: [SUCCESS] Gas used: [2662]
INFO: Test [t2_empty] status: [SUCCESS] Gas used: [740]
-}