;; Each test function must specify method_id
;; Test functions method_id need to started from 0

;; Each test functions must to be in pairs
;; First funtion expect nothing in arguments
;; But need to return:
;;        function selector - which function to test, e.g. 0 for recv_internal, -1 recv_external, 85143 for seqno, and so on
;;        tuple - stack values needed to be passed to function in tuple
;;        c4 cell - start data of smart contract
;;        c7 tuple / null
;;        gas limit integer / null

[int, tuple, cell, tuple, int] t4_add_entry_1_data() method_id(0) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(1, 32)      ;; op
        .store_uint(128, 64)    ;; query_id
        .store_uint(123, 256)   ;; key
        .store_uint(666, 64)    ;; valid until unixtime
        .store_uint(111, 32)    ;; value
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    cell data = begin_cell()
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

;; After test data function
;; We need to define test funtion
;; It will accept:
;;        exit code - exit code of runvm, here you can check errors / not
;;        c4 cell - data of smart contract after runvm invokes
;;        tuple - stack values of smart contract
;;        c5 cell - here you can check all outcoming messages
;;        gas - gas that was used
;; By default test is passed
;; You can use throw_if to fail test

_ t4_add_entry_1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();

    int found = false;
    int key = -1;
    int cnt = 0;
    do {
        (key, slice data_cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
            cnt += 1;

            int valid_until = data_cs~load_uint(64);
            int val = data_cs~load_uint(32);
            ;;throw_if(103, valid_until != 666);
            ;;throw_if(102, val != 111);

            if ((key == 123) & (val == 111) & (valid_until == 666)) {
                found = true;
            }
        }
    } until (~ f);

    throw_if(101, ~ found);
    throw_if(102, cnt != 1);
}



[int, tuple, cell, tuple, int] t4_add_entry_2_data() method_id(2) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(1, 32)      ;; op
        .store_uint(654, 64)    ;; query_id
        .store_uint(2, 256)   ;; key
        .store_uint(now() + 100, 64)    ;; valid until unixtime
        .store_uint(3074474027002800811, 128)    ;; value
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_add_entry_2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();

    int found = false;
    int key = -1;
    int cnt = 0;
    do {
        (key, slice data_cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
            cnt += 1;

            int valid_until = data_cs~load_uint(64);
            int val = 0;
            if (data_cs.slice_bits() >= 128) {
               val = data_cs~load_uint(128);
            }
            ;;throw_if(103, valid_until > now());
            ;;throw_if(102, val != 3074474027002800811);

            if ((key == 2) & (val == 3074474027002800811) & (valid_until > now())) {
                found = true;
            }
        }
    } until (~ f);

    throw_if(101, ~ found);
    throw_if(102, cnt != 2);
}



[int, tuple, cell, tuple, int] t4_replace_entry_1_data() method_id(4) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(1, 32)      ;; op
        .store_uint(64, 64)    ;; query_id
        .store_uint(123, 256)   ;; key
        .store_uint(now() + 30, 64)    ;; valid until unixtime
        .store_uint(999, 32)    ;; value
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_replace_entry_1(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();

    int found = false;
    int key = -1;
    int cnt = 0;
    do {
        (key, slice data_cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
            cnt += 1;

            int valid_until = data_cs~load_uint(64);
            int val = data_cs~load_uint(32);
            ;;throw_if(103, valid_until != 666);
            ;;throw_if(102, val != 999);

            if ((key == 123) & (val == 999) & (valid_until == now() + 30)) {
                found = true;
            }
        }
    } until (~ f);

    throw_if(101, ~ found);
    throw_if(102, cnt != 2);
}



[int, tuple, cell, tuple, int] t4_add_entry_3_data() method_id(6) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(1, 32)      ;; op
        .store_uint(254, 64)    ;; query_id
        .store_uint(321, 256)   ;; key
        .store_uint(50, 64)     ;; valid until unixtime
        .store_uint(145, 64)    ;; value
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_add_entry_3(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();

    int found = false;
    int key = -1;
    int cnt = 0;
    do {
        (key, slice data_cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
            cnt += 1;

            int valid_until = data_cs~load_uint(64);
            int val = 0;
            if (data_cs.slice_bits() >= 64) {
               val = data_cs~load_uint(64);
            }
            ;;throw_if(103, valid_until > now());
            ;;throw_if(102, val != 3074474027002800811);

            if ((key == 321) & (val == 145) & (valid_until == 50)) {
                found = true;
            }
        }
    } until (~ f);

    throw_if(101, ~ found);
    throw_if(102, cnt != 3); ;; check if gas usage is not so big
}



[int, tuple, cell, tuple, int] t4_remove_entry_data() method_id(8) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(2, 32)      ;; op
        .store_uint(128, 64)    ;; query_id
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_remove_entry(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(9) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();
    var valid_until_dict = ds~load_dict();

    int cnt = 0;
    int key = -1;
    do {
        (key, slice data_cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
            ;;throw_if(101, key != 321);

            int val = data_cs~load_uint(32);
            ;;throw_if(102, val != 145);

            (cell valid_until_c, _) = valid_until_dict.udict_get_ref?(256, key);
            var valid_until_cs = valid_until_c.begin_parse();
            int valid_until = valid_until_cs~load_uint(64);
            ;;throw_if(103, valid_until != 999);
            
            cnt += 1;
        }
    } until (~ f);

    throw_if(101, cnt != 2);
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}



[int, tuple, cell, tuple, int] t4_unknows_op_data() method_id(10) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(3, 32)      ;; op
        .store_uint(128, 64)    ;; query_id
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_unknows_op(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(11) {
    throw_if(100, exit_code != 63); ;; test need to be passed
    throw_if(101, gas > 1000000); ;; check if gas usage is not so big
}



[int, tuple, cell, tuple, int] t4_add_ref_entry_data() method_id(12) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;; Example contract message body
    cell msg_full = begin_cell()
        .store_uint(4, 4) ;; flags
        .store_slice(my_address())
        .end_cell();

    cell msg_body = begin_cell()
        .store_uint(1, 32)      ;; op
        .store_uint(999, 64)    ;; query_id
        .store_uint(987, 256)   ;; key
        .store_uint(now() + 10, 64)     ;; valid until unixtime
        .store_ref(begin_cell().store_uint(987654321, 128).end_cell()) ;; ref value
        .end_cell();

    tuple stack = unsafe_tuple([0, 0, msg_full, msg_body.begin_parse()]); ;; stack that will be passed to function

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_add_ref_entry(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(13) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    var ds = data.begin_parse();
    var data_dict = ds~load_dict();

    int key = 987;
    (slice data_cs, int f) = data_dict.udict_get?(256, key);
    if (f) {
        int valid_until = data_cs~load_uint(64);
        throw_if(101, valid_until != now() + 10);
        if (data_cs.slice_refs() > 0) {
           slice val_cs = (data_cs~load_ref()).begin_parse();
           int val = val_cs~load_uint(128);

           throw_if(102, val != 987654321);
        }
    }

    throw_if(103, ~ f);
}



[int, tuple, cell, tuple, int] t4_get_key_data() method_id(14) {
    int key = 123;

    int function_selector = 127977;         ;; funtion to run (127977 is get_key)
    tuple stack = unsafe_tuple([key]);      ;; stack for function

    cell data_dict = null();
    cell valid_until_dict = null();

    data_dict~udict_set(256, key, begin_cell().store_uint(10, 32).end_cell().begin_parse());
    valid_until_dict~udict_set_ref(256, key, begin_cell().store_uint(11, 64).end_cell());

    {-cell data = begin_cell()      ;; initial data
        .store_dict(data_dict)
        .store_dict(valid_until_dict)
        .end_cell();
    -}

    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ t4_get_key(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(15) {
    throw_if(100, exit_code != 0); ;; test need to be passed

    int valid_until = first(stack);
    slice ds = second(stack);
    int data = ds~load_uint(32);

    throw_if(101, valid_until < now() + 25);
    throw_if(102, data != 999);
    throw_if(103, gas > 1000000); ;; check if gas usage is not so big
} 



[int, tuple, cell, tuple, int] t4_get_key_empty_data() method_id(16) {
    int key = 123;

    int function_selector = 127977;         ;; funtion to run (127977 is get_key)
    tuple stack = unsafe_tuple([key]);      ;; stack for function

    cell data = begin_cell()      ;; initial data
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ t4_get_key_empty(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(17) {
    throw_if(exit_code, exit_code != 63); ;; test need to be passed
}



[int, tuple, cell, tuple, int] t4_get_unknown_key_data() method_id(18) {
    int key = 123;

    int function_selector = 127977;         ;; funtion to run (127977 is get_key)
    tuple stack = unsafe_tuple([key + 1]);      ;; stack for function

    cell data_dict = new_dict();
    cell valid_until_dict = new_dict();

    data_dict~udict_set(256, key, begin_cell().store_uint(10, 32).end_cell().begin_parse());
    valid_until_dict~udict_set_ref(256, key, begin_cell().store_uint(11, 64).end_cell());

    cell data = begin_cell()      ;; initial data
        .store_dict(data_dict)
        .store_dict(valid_until_dict)
        .end_cell();

    return [function_selector, stack, data, get_c7(), null()];
}

_ t4_get_unknown_key(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(19) {
    throw_if(exit_code, exit_code != 62); ;; test need to be passed
}



{-
INFO: Test [t4_add_entry_1] status: [SUCCESS] Gas used: [1983]
INFO: Test [t4_add_entry_2] status: [SUCCESS] Gas used: [3091]
INFO: Test [t4_replace_entry_1] status: [SUCCESS] Gas used: [2691]
INFO: Test [t4_add_entry_3] status: [SUCCESS] Gas used: [3091]
INFO: Test [t4_remove_entry] status: [SUCCESS] Gas used: [4362]
INFO: Test [t4_unknows_op] status: [SUCCESS] Gas used: [979]
INFO: Test [t4_add_ref_entry] status: [SUCCESS] Gas used: [3091]
INFO: Test [t4_get_key] status: [SUCCESS] Gas used: [989]
INFO: Test [t4_get_key_empty] status: [SUCCESS] Gas used: [550]
INFO: Test [t4_get_unknown_key] status: [SUCCESS] Gas used: [852]
-}
